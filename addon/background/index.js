(()=>{const e="Iv23liIE0QVUZFuIfOO9",t=chrome.identity.getRedirectURL("oauth2");async function o(o,n){const{authState:c}=await chrome.storage.local.get(["authState"]);if(n===c)try{const{clientSecret:n}=await chrome.storage.local.get(["clientSecret"]);let c=n;c||(c="eb4639586c0f8ddb37ce451128b6200721fc1014",await chrome.storage.local.set({clientSecret:c}),console.log("Using default client secret"));const r=`https://github.com/login/oauth/access_token?client_id=${e}&client_secret=${c}&code=${o}&redirect_uri=${encodeURIComponent(t)}`,s=await fetch(r,{method:"POST",headers:{Accept:"application/json"}}),a=await s.json();if(console.log("Token response received:",a.access_token?"Token received":"No token"),a.access_token)return await chrome.storage.local.set({githubToken:a.access_token}),console.log("GitHub authentication successful"),chrome.runtime.sendMessage({type:"GITHUB_AUTH_SUCCESS"}),!0;throw a.error?(console.error("GitHub auth error:",a.error),new Error(`GitHub auth error: ${a.error_description||a.error}`)):new Error("No access token in response")}catch(e){return console.error("Error exchanging code for token:",e),!1}else console.error("OAuth state mismatch")}chrome.runtime.onInstalled.addListener(()=>{console.log("Web Clipper extension installed"),console.log("Redirect URL for OAuth:",t),chrome.storage.local.get(["githubToken"],e=>{console.log("Stored token:",e.githubToken?"Yes":"No")})}),chrome.runtime.onMessage.addListener((n,c,r)=>(console.log("Received message:",n.type),"INITIATE_GITHUB_AUTH"===n.type?(async function(){try{console.log("Initiating GitHub auth...");const n=Math.random().toString(36).substring(2,15);await chrome.storage.local.set({authState:n});const c=`https://github.com/login/oauth/authorize?client_id=${e}&state=${n}&scope=repo&redirect_uri=${encodeURIComponent(t)}`;console.log("Auth URL:",c);const r=await chrome.identity.launchWebAuthFlow({url:c,interactive:!0});console.log("Got response URL:",r);const s=new URL(r),a=s.searchParams.get("code"),i=s.searchParams.get("state");if(a&&i)return console.log("Got code and state, handling callback..."),o(a,i)}catch(e){console.error("OAuth flow error:",e)}}().then(e=>{console.log("Auth result:",e),r({success:!!e})}).catch(e=>{console.error("Auth initiation error:",e),r({success:!1,error:e.message})}),!0):"SAVE_CLIP_TO_GITHUB"===n.type?(async function(e){try{const{githubToken:t}=await chrome.storage.local.get(["githubToken"]);if(!t)throw new Error("Not authenticated with GitHub");const o=`Content/webClips/${e.title.replace(/[^a-z0-9]/gi,"-").toLowerCase()}-${Date.now()}.md`,n=`---\ntitle: "${e.title}"\ntype: "${e.type}"\ntags: [${e.tags.map(e=>`"${e}"`).join(", ")}]\nurl: "${e.url}"\nsite: "${e.site}"\ndate: "${e.date}"\n---\n\n${e.markdown}\n`,c=btoa(unescape(encodeURIComponent(n))),r=await fetch(`https://api.github.com/repos/Lilianada/Lilyslab/contents/${o}`,{method:"PUT",headers:{Authorization:`token ${t}`,"Content-Type":"application/json"},body:JSON.stringify({message:`Add web clip: ${e.title}`,content:c,branch:"main"})});if(!r.ok){const e=await r.json();throw new Error(`GitHub API error: ${e.message}`)}return await r.json()}catch(e){throw console.error("Error saving to GitHub:",e),e}}(n.clip).then(e=>{r({success:!0,result:e})}).catch(e=>{r({success:!1,error:e.message})}),!0):"CHECK_GITHUB_AUTH"===n.type?(chrome.storage.local.get(["githubToken"],e=>{const t=!!e.githubToken;console.log("Auth check:",t?"Authenticated":"Not authenticated"),r({authenticated:t})}),!0):"GITHUB_OAUTH_CALLBACK"===n.type&&n.code&&n.state?(console.log("Received OAuth callback from page"),o(n.code,n.state).then(e=>{r({success:e})}).catch(e=>{r({success:!1,error:e.message})}),!0):void 0))})();