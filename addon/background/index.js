(()=>{const e="Iv23liIE0QVUZFuIfOO9",t=chrome.identity.getRedirectURL();chrome.runtime.onInstalled.addListener(()=>{console.log("Web Clipper extension installed"),chrome.storage.local.get(["githubToken"],e=>{console.log("Stored token:",e.githubToken?"Yes":"No")})}),chrome.runtime.onMessage.addListener((o,r,n)=>"INITIATE_GITHUB_AUTH"===o.type?(async function(){const o=Math.random().toString(36).substring(2,15);await chrome.storage.local.set({authState:o});const r=`https://github.com/login/oauth/authorize?client_id=${e}&state=${o}&scope=repo&redirect_uri=${encodeURIComponent(t)}`;try{const o=await chrome.identity.launchWebAuthFlow({url:r,interactive:!0}),n=new URL(o),a=n.searchParams.get("code"),c=n.searchParams.get("state");if(a&&c)return async function(o,r){const{authState:n}=await chrome.storage.local.get(["authState"]);if(r===n)try{const{clientSecret:r}=await chrome.storage.local.get(["clientSecret"]);let n=r;if(!n&&(await new Promise(e=>{chrome.tabs.create({url:chrome.runtime.getURL("oauth-callback.html")+"?promptSecret=true"},async t=>{const o=async(r,a)=>{"GITHUB_CLIENT_SECRET"===r.type&&a.tab.id===t.id&&(n=r.secret,n&&await chrome.storage.local.set({clientSecret:n}),chrome.tabs.remove(t.id),chrome.runtime.onMessage.removeListener(o),e())};chrome.runtime.onMessage.addListener(o)})}),!n))throw new Error("Client secret is required for GitHub authentication");const a=await fetch("https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({client_id:e,client_secret:n,code:o,redirect_uri:t})}),c=await a.json();if(c.access_token)return await chrome.storage.local.set({githubToken:c.access_token}),console.log("GitHub authentication successful"),chrome.runtime.sendMessage({type:"GITHUB_AUTH_SUCCESS"}),!0;throw new Error("No access token in response")}catch(e){return console.error("Error exchanging code for token:",e),!1}else console.error("OAuth state mismatch")}(a,c)}catch(e){console.error("OAuth flow error:",e)}}().catch(e=>{console.error("Auth initiation error:",e),n({success:!1,error:e.message})}),!0):"SAVE_CLIP_TO_GITHUB"===o.type?(async function(e){try{const{githubToken:t}=await chrome.storage.local.get(["githubToken"]);if(!t)throw new Error("Not authenticated with GitHub");const o=`Content/webClips/${e.title.replace(/[^a-z0-9]/gi,"-").toLowerCase()}-${Date.now()}.md`,r=`---\ntitle: "${e.title}"\ntype: "${e.type}"\ntags: [${e.tags.map(e=>`"${e}"`).join(", ")}]\nurl: "${e.url}"\nsite: "${e.site}"\ndate: "${e.date}"\n---\n\n${e.markdown}\n`,n=btoa(unescape(encodeURIComponent(r))),a=await fetch(`https://api.github.com/repos/Lilianada/Lilyslab/contents/${o}`,{method:"PUT",headers:{Authorization:`token ${t}`,"Content-Type":"application/json"},body:JSON.stringify({message:`Add web clip: ${e.title}`,content:n,branch:"main"})});if(!a.ok){const e=await a.json();throw new Error(`GitHub API error: ${e.message}`)}return await a.json()}catch(e){throw console.error("Error saving to GitHub:",e),e}}(o.clip).then(e=>{n({success:!0,result:e})}).catch(e=>{n({success:!1,error:e.message})}),!0):"CHECK_GITHUB_AUTH"===o.type?(chrome.storage.local.get(["githubToken"],e=>{n({authenticated:!!e.githubToken})}),!0):void 0)})();